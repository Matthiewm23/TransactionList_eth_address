{"ast":null,"code":"var _jsxFileName = \"/root/transactions_add_eth/src/TransactionList.js\",\n  _this = this;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from 'react';\n\n// const TransactionsList = ({ address, startBlock }) => { // We use this variable to separate the user actions from the the transactions we got\n//   const [transactions, setTransactions] = useState([]);\n//   const [status, setStatus] = useState(); // If \"0\", it means the API of etherscan detected an error (address, API key or start block), so we make sure = \"1\" to work\n//   const [lastblock, setLastblock] = useState(); // If \"0\", it means the API of etherscan detected an error (address, API key or start block), so we make sure = \"1\" to work\n\n//   useEffect(() => { // We use that to make no problem when we change the adress or the starting block\n\n//     const fetchTransactions = async () => {\n//       const apiKey = \"7KT9JFYWU7UIGBUH4TV4QF21PTCE4W7UPN\"; // My own API key I created \n//       const response = await fetch(`https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=${startBlock}&apikey=${apiKey}`); // Etherscan API use\n//       const data = await response.json(); // Transform the data in json\n//       setTransactions(data.result); // Take the results from the API\n//       setStatus(data.status); // Get the status, so that we know wether we have a list of transactions\n//     };\n//     fetchTransactions();\n\n//     const fetchLastBlock = async () => { \n//         const apiKey = \"7KT9JFYWU7UIGBUH4TV4QF21PTCE4W7UPN\"; // My own API key I created \n//         const response = await fetch(`https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=${apiKey}`); // We want the number of the last block of the blockchain ethereum\n//         const data = await response.json(); // Transform the data in json\n//         setLastblock(parseInt(data.result,16));\n//       };\n//     fetchLastBlock();\n\n//   }, [address, startBlock]); // Two dependencies (input) of the use effect\n\n//   if (status === \"1\" && lastblock >= startBlock) { // If the status is one, we got transactions ! We want the startblock to be less than the last block of the blokchain \n//       return (\n//         <div>\n//           <h2>List of the transactions</h2>\n//             <thead>\n//               <tr> {/* First ligne with all what will be displayed */}\n//                 <th>Block Number</th>\n//                 <th>From</th>\n//                 <th>To</th>\n//                 <th>Value (ETH)</th>\n//               </tr>\n//             </thead>\n//             <tbody> {/* the hash being different for each transactions, we can use it as a key to display all transactions */}\n//               {transactions.map((transaction) => ( \n//                 <tr key={transaction.hash}>\n//                   <td>{transaction.blockNumber}</td>\n//                   <td>{transaction.from}</td>\n//                   <td>{transaction.to}</td>\n//                   <td>{Number(transaction.value) / 10**18}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//         </div>\n//       );\n\n//   } else { // If the status is not equal to \"1\", it means there is a problem\n//     return (\n//       <div>\n//           <h3> If the address and the start block is correct, it means there is no transactions ! Orelse, check your address and the starting block </h3>\n//           <h3> {startblock}  </h3>\n//       </div>\n//     );\n//   }\n// };\n\n// export default TransactionsList;\n\nvar TransactionsList = function TransactionsList(_ref) {\n  var address = _ref.address,\n    startBlock = _ref.startBlock;\n  // We use this variable to separate the user actions from the the transactions we got\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" If the address and the start block is correct, it means there is no transactions ! Orelse, check your address and the starting block \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" \", startblock, \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 11\n  }, _this);\n};\n_c = TransactionsList;\nexport default TransactionsList;\nvar _c;\n$RefreshReg$(_c, \"TransactionsList\");","map":{"version":3,"names":["TransactionsList","_ref","address","startBlock","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","startblock","_c","$RefreshReg$"],"sources":["/root/transactions_add_eth/src/TransactionList.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n\n// const TransactionsList = ({ address, startBlock }) => { // We use this variable to separate the user actions from the the transactions we got\n//   const [transactions, setTransactions] = useState([]);\n//   const [status, setStatus] = useState(); // If \"0\", it means the API of etherscan detected an error (address, API key or start block), so we make sure = \"1\" to work\n//   const [lastblock, setLastblock] = useState(); // If \"0\", it means the API of etherscan detected an error (address, API key or start block), so we make sure = \"1\" to work\n\n\n//   useEffect(() => { // We use that to make no problem when we change the adress or the starting block\n\n//     const fetchTransactions = async () => {\n//       const apiKey = \"7KT9JFYWU7UIGBUH4TV4QF21PTCE4W7UPN\"; // My own API key I created \n//       const response = await fetch(`https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=${startBlock}&apikey=${apiKey}`); // Etherscan API use\n//       const data = await response.json(); // Transform the data in json\n//       setTransactions(data.result); // Take the results from the API\n//       setStatus(data.status); // Get the status, so that we know wether we have a list of transactions\n//     };\n//     fetchTransactions();\n\n//     const fetchLastBlock = async () => { \n//         const apiKey = \"7KT9JFYWU7UIGBUH4TV4QF21PTCE4W7UPN\"; // My own API key I created \n//         const response = await fetch(`https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=${apiKey}`); // We want the number of the last block of the blockchain ethereum\n//         const data = await response.json(); // Transform the data in json\n//         setLastblock(parseInt(data.result,16));\n//       };\n//     fetchLastBlock();\n\n//   }, [address, startBlock]); // Two dependencies (input) of the use effect\n\n//   if (status === \"1\" && lastblock >= startBlock) { // If the status is one, we got transactions ! We want the startblock to be less than the last block of the blokchain \n//       return (\n//         <div>\n//           <h2>List of the transactions</h2>\n//             <thead>\n//               <tr> {/* First ligne with all what will be displayed */}\n//                 <th>Block Number</th>\n//                 <th>From</th>\n//                 <th>To</th>\n//                 <th>Value (ETH)</th>\n//               </tr>\n//             </thead>\n//             <tbody> {/* the hash being different for each transactions, we can use it as a key to display all transactions */}\n//               {transactions.map((transaction) => ( \n//                 <tr key={transaction.hash}>\n//                   <td>{transaction.blockNumber}</td>\n//                   <td>{transaction.from}</td>\n//                   <td>{transaction.to}</td>\n//                   <td>{Number(transaction.value) / 10**18}</td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//         </div>\n//       );\n   \n//   } else { // If the status is not equal to \"1\", it means there is a problem\n//     return (\n//       <div>\n//           <h3> If the address and the start block is correct, it means there is no transactions ! Orelse, check your address and the starting block </h3>\n//           <h3> {startblock}  </h3>\n//       </div>\n//     );\n//   }\n// };\n\n// export default TransactionsList;\n\n\nconst TransactionsList = ({ address, startBlock }) => { // We use this variable to separate the user actions from the the transactions we got\n\nreturn (\n          <div>\n              <h3> If the address and the start block is correct, it means there is no transactions ! Orelse, check your address and the starting block </h3>\n              <h3> {startblock}  </h3>\n          </div>\n        );\n}\nexport default TransactionsList;\n"],"mappings":";;;AAAA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAAC,IAAA,EAAgC;EAAA,IAA1BC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EAAS;;EAExD,oBACUC,OAAA;IAAAC,QAAA,gBACID,OAAA;MAAAC,QAAA,EAAI;IAAsI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAA,CAAK,eAC/IN,OAAA;MAAAC,QAAA,GAAI,GAAC,EAACM,UAAU,EAAC,IAAE;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAA,CAAK;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KAAA,CACtB;AAEhB,CAAC;AAAAE,EAAA,GARKZ,gBAAgB;AAStB,eAAeA,gBAAgB;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}